-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.2
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Echo is
generic (
    C_S_AXI_CTRL_BUS_ADDR_WIDTH : INTEGER := 5;
    C_S_AXI_CTRL_BUS_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    value_in_V_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    value_in_V_TVALID : IN STD_LOGIC;
    value_in_V_TREADY : OUT STD_LOGIC;
    value_out_V_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    value_out_V_TVALID : OUT STD_LOGIC;
    value_out_V_TREADY : IN STD_LOGIC;
    s_axi_CTRL_BUS_AWVALID : IN STD_LOGIC;
    s_axi_CTRL_BUS_AWREADY : OUT STD_LOGIC;
    s_axi_CTRL_BUS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_BUS_ADDR_WIDTH-1 downto 0);
    s_axi_CTRL_BUS_WVALID : IN STD_LOGIC;
    s_axi_CTRL_BUS_WREADY : OUT STD_LOGIC;
    s_axi_CTRL_BUS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_BUS_DATA_WIDTH-1 downto 0);
    s_axi_CTRL_BUS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_BUS_DATA_WIDTH/8-1 downto 0);
    s_axi_CTRL_BUS_ARVALID : IN STD_LOGIC;
    s_axi_CTRL_BUS_ARREADY : OUT STD_LOGIC;
    s_axi_CTRL_BUS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_BUS_ADDR_WIDTH-1 downto 0);
    s_axi_CTRL_BUS_RVALID : OUT STD_LOGIC;
    s_axi_CTRL_BUS_RREADY : IN STD_LOGIC;
    s_axi_CTRL_BUS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CTRL_BUS_DATA_WIDTH-1 downto 0);
    s_axi_CTRL_BUS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_CTRL_BUS_BVALID : OUT STD_LOGIC;
    s_axi_CTRL_BUS_BREADY : IN STD_LOGIC;
    s_axi_CTRL_BUS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0) );
end;


architecture behav of Echo is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "Echo,hls_ip_2017_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z100ffg900-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.256000,HLS_SYN_LAT=12,HLS_SYN_TPT=none,HLS_SYN_MEM=1,HLS_SYN_DSP=5,HLS_SYN_FF=1131,HLS_SYN_LUT=1251}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (12 downto 0) := "0000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (12 downto 0) := "0000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (12 downto 0) := "0000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (12 downto 0) := "0000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (12 downto 0) := "0000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (12 downto 0) := "0000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (12 downto 0) := "0001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (12 downto 0) := "0010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (12 downto 0) := "0100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (12 downto 0) := "1000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_190 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110010000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_rst_n_inv : STD_LOGIC;
    signal value_in_V_0_data_out : STD_LOGIC_VECTOR (31 downto 0);
    signal value_in_V_0_vld_in : STD_LOGIC;
    signal value_in_V_0_vld_out : STD_LOGIC;
    signal value_in_V_0_ack_in : STD_LOGIC;
    signal value_in_V_0_ack_out : STD_LOGIC;
    signal value_in_V_0_payload_A : STD_LOGIC_VECTOR (31 downto 0);
    signal value_in_V_0_payload_B : STD_LOGIC_VECTOR (31 downto 0);
    signal value_in_V_0_sel_rd : STD_LOGIC := '0';
    signal value_in_V_0_sel_wr : STD_LOGIC := '0';
    signal value_in_V_0_sel : STD_LOGIC;
    signal value_in_V_0_load_A : STD_LOGIC;
    signal value_in_V_0_load_B : STD_LOGIC;
    signal value_in_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal value_in_V_0_state_cmp_full : STD_LOGIC;
    signal value_out_V_1_data_out : STD_LOGIC_VECTOR (31 downto 0);
    signal value_out_V_1_vld_in : STD_LOGIC;
    signal value_out_V_1_vld_out : STD_LOGIC;
    signal value_out_V_1_ack_in : STD_LOGIC;
    signal value_out_V_1_ack_out : STD_LOGIC;
    signal value_out_V_1_payload_A : STD_LOGIC_VECTOR (31 downto 0);
    signal value_out_V_1_payload_B : STD_LOGIC_VECTOR (31 downto 0);
    signal value_out_V_1_sel_rd : STD_LOGIC := '0';
    signal value_out_V_1_sel_wr : STD_LOGIC := '0';
    signal value_out_V_1_sel : STD_LOGIC;
    signal value_out_V_1_load_A : STD_LOGIC;
    signal value_out_V_1_load_B : STD_LOGIC;
    signal value_out_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal value_out_V_1_state_cmp_full : STD_LOGIC;
    signal delay : STD_LOGIC_VECTOR (31 downto 0);
    signal scale : STD_LOGIC_VECTOR (31 downto 0);
    signal guard_variable_for_E : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal readBuffer : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal buffer_r_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal buffer_r_ce0 : STD_LOGIC;
    signal buffer_r_we0 : STD_LOGIC;
    signal buffer_r_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal writeBuffer : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal value_in_V_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal value_out_V_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal scale_read_reg_210 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal tmp_2_i_fu_132_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal guard_variable_for_E_load_fu_124_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal buffer_load_reg_233 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal grp_fu_120_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_reg_238 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal grp_fu_114_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal current_value_reg_248 : STD_LOGIC_VECTOR (31 downto 0);
    signal readBuffer_loc_reg_105 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_fu_144_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_6_fu_179_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal storemerge_fu_161_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal storemerge5_fu_196_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal tmp_9_fu_149_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_s_fu_155_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_fu_184_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_7_fu_190_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_114_ce : STD_LOGIC;
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (12 downto 0);

    component Echo_fadd_32ns_32bkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component Echo_fmul_32ns_32cud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component Echo_buffer_r IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component Echo_CTRL_BUS_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        delay : OUT STD_LOGIC_VECTOR (31 downto 0);
        scale : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    buffer_r_U : component Echo_buffer_r
    generic map (
        DataWidth => 32,
        AddressRange => 400,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => buffer_r_address0,
        ce0 => buffer_r_ce0,
        we0 => buffer_r_we0,
        d0 => current_value_reg_248,
        q0 => buffer_r_q0);

    Echo_CTRL_BUS_s_axi_U : component Echo_CTRL_BUS_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CTRL_BUS_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CTRL_BUS_DATA_WIDTH)
    port map (
        AWVALID => s_axi_CTRL_BUS_AWVALID,
        AWREADY => s_axi_CTRL_BUS_AWREADY,
        AWADDR => s_axi_CTRL_BUS_AWADDR,
        WVALID => s_axi_CTRL_BUS_WVALID,
        WREADY => s_axi_CTRL_BUS_WREADY,
        WDATA => s_axi_CTRL_BUS_WDATA,
        WSTRB => s_axi_CTRL_BUS_WSTRB,
        ARVALID => s_axi_CTRL_BUS_ARVALID,
        ARREADY => s_axi_CTRL_BUS_ARREADY,
        ARADDR => s_axi_CTRL_BUS_ARADDR,
        RVALID => s_axi_CTRL_BUS_RVALID,
        RREADY => s_axi_CTRL_BUS_RREADY,
        RDATA => s_axi_CTRL_BUS_RDATA,
        RRESP => s_axi_CTRL_BUS_RRESP,
        BVALID => s_axi_CTRL_BUS_BVALID,
        BREADY => s_axi_CTRL_BUS_BREADY,
        BRESP => s_axi_CTRL_BUS_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        delay => delay,
        scale => scale);

    Echo_fadd_32ns_32bkb_U1 : component Echo_fadd_32ns_32bkb
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => value_in_V_0_data_out,
        din1 => tmp_5_reg_238,
        ce => grp_fu_114_ce,
        dout => grp_fu_114_p2);

    Echo_fmul_32ns_32cud_U2 : component Echo_fmul_32ns_32cud
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => buffer_load_reg_233,
        din1 => scale_read_reg_210,
        ce => ap_const_logic_1,
        dout => grp_fu_120_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    value_in_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                value_in_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = value_in_V_0_ack_out) and (ap_const_logic_1 = value_in_V_0_vld_out))) then 
                                        value_in_V_0_sel_rd <= not(value_in_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    value_in_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                value_in_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = value_in_V_0_vld_in) and (ap_const_logic_1 = value_in_V_0_ack_in))) then 
                                        value_in_V_0_sel_wr <= not(value_in_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    value_in_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                value_in_V_0_state <= ap_const_lv2_0;
            else
                if ((((ap_const_logic_0 = value_in_V_0_vld_in) and (ap_const_logic_1 = value_in_V_0_ack_out) and (value_in_V_0_state = ap_const_lv2_3)) or ((ap_const_logic_0 = value_in_V_0_vld_in) and (value_in_V_0_state = ap_const_lv2_2)))) then 
                    value_in_V_0_state <= ap_const_lv2_2;
                elsif ((((ap_const_logic_1 = value_in_V_0_vld_in) and (ap_const_logic_0 = value_in_V_0_ack_out) and (value_in_V_0_state = ap_const_lv2_3)) or ((ap_const_logic_0 = value_in_V_0_ack_out) and (value_in_V_0_state = ap_const_lv2_1)))) then 
                    value_in_V_0_state <= ap_const_lv2_1;
                elsif ((((ap_const_logic_1 = value_in_V_0_vld_in) and (value_in_V_0_state = ap_const_lv2_2)) or ((ap_const_logic_1 = value_in_V_0_ack_out) and (value_in_V_0_state = ap_const_lv2_1)) or ((value_in_V_0_state = ap_const_lv2_3) and not(((ap_const_logic_1 = value_in_V_0_vld_in) and (ap_const_logic_0 = value_in_V_0_ack_out))) and not(((ap_const_logic_0 = value_in_V_0_vld_in) and (ap_const_logic_1 = value_in_V_0_ack_out)))))) then 
                    value_in_V_0_state <= ap_const_lv2_3;
                else 
                    value_in_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    value_out_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                value_out_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = value_out_V_1_ack_out) and (ap_const_logic_1 = value_out_V_1_vld_out))) then 
                                        value_out_V_1_sel_rd <= not(value_out_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    value_out_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                value_out_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = value_out_V_1_vld_in) and (ap_const_logic_1 = value_out_V_1_ack_in))) then 
                                        value_out_V_1_sel_wr <= not(value_out_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    value_out_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                value_out_V_1_state <= ap_const_lv2_0;
            else
                if ((((ap_const_logic_0 = value_out_V_1_vld_in) and (ap_const_logic_1 = value_out_V_1_ack_out) and (ap_const_lv2_3 = value_out_V_1_state)) or ((ap_const_logic_0 = value_out_V_1_vld_in) and (ap_const_lv2_2 = value_out_V_1_state)))) then 
                    value_out_V_1_state <= ap_const_lv2_2;
                elsif ((((ap_const_logic_1 = value_out_V_1_vld_in) and (ap_const_logic_0 = value_out_V_1_ack_out) and (ap_const_lv2_3 = value_out_V_1_state)) or ((ap_const_logic_0 = value_out_V_1_ack_out) and (ap_const_lv2_1 = value_out_V_1_state)))) then 
                    value_out_V_1_state <= ap_const_lv2_1;
                elsif ((((ap_const_logic_1 = value_out_V_1_vld_in) and (ap_const_lv2_2 = value_out_V_1_state)) or ((ap_const_logic_1 = value_out_V_1_ack_out) and (ap_const_lv2_1 = value_out_V_1_state)) or ((ap_const_lv2_3 = value_out_V_1_state) and not(((ap_const_logic_1 = value_out_V_1_vld_in) and (ap_const_logic_0 = value_out_V_1_ack_out))) and not(((ap_const_logic_0 = value_out_V_1_vld_in) and (ap_const_logic_1 = value_out_V_1_ack_out)))))) then 
                    value_out_V_1_state <= ap_const_lv2_3;
                else 
                    value_out_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    readBuffer_loc_reg_105_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                if ((ap_const_lv1_1 = guard_variable_for_E_load_fu_124_p1)) then 
                    readBuffer_loc_reg_105 <= readBuffer;
                elsif ((ap_const_lv1_0 = guard_variable_for_E_load_fu_124_p1)) then 
                    readBuffer_loc_reg_105 <= tmp_2_i_fu_132_p2;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                buffer_load_reg_233 <= buffer_r_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state12) and (value_out_V_1_ack_in = ap_const_logic_1))) then
                current_value_reg_248 <= grp_fu_114_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_lv1_0 = guard_variable_for_E_load_fu_124_p1))) then
                guard_variable_for_E <= ap_const_lv1_1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                readBuffer <= storemerge_fu_161_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                scale_read_reg_210 <= scale;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                tmp_5_reg_238 <= grp_fu_120_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = value_in_V_0_load_A)) then
                value_in_V_0_payload_A <= value_in_V_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = value_in_V_0_load_B)) then
                value_in_V_0_payload_B <= value_in_V_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = value_out_V_1_load_A)) then
                value_out_V_1_payload_A <= grp_fu_114_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = value_out_V_1_load_B)) then
                value_out_V_1_payload_B <= grp_fu_114_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state13) and (value_out_V_1_ack_in = ap_const_logic_1))) then
                writeBuffer <= storemerge5_fu_196_p3;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (value_in_V_0_vld_out, value_out_V_1_ack_in, ap_CS_fsm, ap_CS_fsm_state8, ap_CS_fsm_state12, ap_CS_fsm_state13)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state8) and (value_in_V_0_vld_out = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state12) and (value_out_V_1_ack_in = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state13 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state13) and (value_out_V_1_ack_in = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state13;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    buffer_r_address0_assign_proc : process(ap_CS_fsm_state13, ap_CS_fsm_state2, tmp_4_fu_144_p1, tmp_6_fu_179_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            buffer_r_address0 <= tmp_6_fu_179_p1(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            buffer_r_address0 <= tmp_4_fu_144_p1(9 - 1 downto 0);
        else 
            buffer_r_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    buffer_r_ce0_assign_proc : process(value_out_V_1_ack_in, ap_CS_fsm_state13, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_const_logic_1 = ap_CS_fsm_state13) and (value_out_V_1_ack_in = ap_const_logic_1)))) then 
            buffer_r_ce0 <= ap_const_logic_1;
        else 
            buffer_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    buffer_r_we0_assign_proc : process(value_out_V_1_ack_in, ap_CS_fsm_state13)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state13) and (value_out_V_1_ack_in = ap_const_logic_1))) then 
            buffer_r_we0 <= ap_const_logic_1;
        else 
            buffer_r_we0 <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_114_ce_assign_proc : process(value_in_V_0_vld_out, value_out_V_1_ack_in, ap_CS_fsm_state8, ap_CS_fsm_state12, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state8) and (value_in_V_0_vld_out = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state12) and (value_out_V_1_ack_in = ap_const_logic_1)) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            grp_fu_114_ce <= ap_const_logic_1;
        else 
            grp_fu_114_ce <= ap_const_logic_0;
        end if; 
    end process;

    guard_variable_for_E_load_fu_124_p1 <= guard_variable_for_E;
    storemerge5_fu_196_p3 <= 
        tmp_7_fu_190_p2 when (tmp_8_fu_184_p2(0) = '1') else 
        ap_const_lv32_0;
    storemerge_fu_161_p3 <= 
        tmp_s_fu_155_p2 when (tmp_9_fu_149_p2(0) = '1') else 
        ap_const_lv32_0;
    tmp_2_i_fu_132_p2 <= std_logic_vector(unsigned(ap_const_lv32_190) - unsigned(delay));
        tmp_4_fu_144_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(readBuffer_loc_reg_105),64));

        tmp_6_fu_179_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(writeBuffer),64));

    tmp_7_fu_190_p2 <= std_logic_vector(unsigned(writeBuffer) + unsigned(ap_const_lv32_1));
    tmp_8_fu_184_p2 <= "1" when (signed(writeBuffer) < signed(ap_const_lv32_190)) else "0";
    tmp_9_fu_149_p2 <= "1" when (signed(readBuffer_loc_reg_105) < signed(ap_const_lv32_190)) else "0";
    tmp_s_fu_155_p2 <= std_logic_vector(unsigned(readBuffer_loc_reg_105) + unsigned(ap_const_lv32_1));
    value_in_V_0_ack_in <= value_in_V_0_state(1);

    value_in_V_0_ack_out_assign_proc : process(value_in_V_0_vld_out, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) and (value_in_V_0_vld_out = ap_const_logic_1))) then 
            value_in_V_0_ack_out <= ap_const_logic_1;
        else 
            value_in_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    value_in_V_0_data_out_assign_proc : process(value_in_V_0_payload_A, value_in_V_0_payload_B, value_in_V_0_sel)
    begin
        if ((ap_const_logic_1 = value_in_V_0_sel)) then 
            value_in_V_0_data_out <= value_in_V_0_payload_B;
        else 
            value_in_V_0_data_out <= value_in_V_0_payload_A;
        end if; 
    end process;

    value_in_V_0_load_A <= (value_in_V_0_state_cmp_full and not(value_in_V_0_sel_wr));
    value_in_V_0_load_B <= (value_in_V_0_sel_wr and value_in_V_0_state_cmp_full);
    value_in_V_0_sel <= value_in_V_0_sel_rd;
    value_in_V_0_state_cmp_full <= '0' when (value_in_V_0_state = ap_const_lv2_1) else '1';
    value_in_V_0_vld_in <= value_in_V_TVALID;
    value_in_V_0_vld_out <= value_in_V_0_state(0);

    value_in_V_TDATA_blk_n_assign_proc : process(value_in_V_0_state, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            value_in_V_TDATA_blk_n <= value_in_V_0_state(0);
        else 
            value_in_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    value_in_V_TREADY <= value_in_V_0_state(1);
    value_out_V_1_ack_in <= value_out_V_1_state(1);
    value_out_V_1_ack_out <= value_out_V_TREADY;

    value_out_V_1_data_out_assign_proc : process(value_out_V_1_payload_A, value_out_V_1_payload_B, value_out_V_1_sel)
    begin
        if ((ap_const_logic_1 = value_out_V_1_sel)) then 
            value_out_V_1_data_out <= value_out_V_1_payload_B;
        else 
            value_out_V_1_data_out <= value_out_V_1_payload_A;
        end if; 
    end process;

    value_out_V_1_load_A <= (value_out_V_1_state_cmp_full and not(value_out_V_1_sel_wr));
    value_out_V_1_load_B <= (value_out_V_1_sel_wr and value_out_V_1_state_cmp_full);
    value_out_V_1_sel <= value_out_V_1_sel_rd;
    value_out_V_1_state_cmp_full <= '0' when (value_out_V_1_state = ap_const_lv2_1) else '1';

    value_out_V_1_vld_in_assign_proc : process(value_out_V_1_ack_in, ap_CS_fsm_state12)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) and (value_out_V_1_ack_in = ap_const_logic_1))) then 
            value_out_V_1_vld_in <= ap_const_logic_1;
        else 
            value_out_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    value_out_V_1_vld_out <= value_out_V_1_state(0);
    value_out_V_TDATA <= value_out_V_1_data_out;

    value_out_V_TDATA_blk_n_assign_proc : process(value_out_V_1_state, ap_CS_fsm_state12, ap_CS_fsm_state13)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            value_out_V_TDATA_blk_n <= value_out_V_1_state(1);
        else 
            value_out_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    value_out_V_TVALID <= value_out_V_1_state(0);
end behav;
