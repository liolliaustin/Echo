// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "Echo.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic Echo::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic Echo::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<13> Echo::ap_ST_fsm_state1 = "1";
const sc_lv<13> Echo::ap_ST_fsm_state2 = "10";
const sc_lv<13> Echo::ap_ST_fsm_state3 = "100";
const sc_lv<13> Echo::ap_ST_fsm_state4 = "1000";
const sc_lv<13> Echo::ap_ST_fsm_state5 = "10000";
const sc_lv<13> Echo::ap_ST_fsm_state6 = "100000";
const sc_lv<13> Echo::ap_ST_fsm_state7 = "1000000";
const sc_lv<13> Echo::ap_ST_fsm_state8 = "10000000";
const sc_lv<13> Echo::ap_ST_fsm_state9 = "100000000";
const sc_lv<13> Echo::ap_ST_fsm_state10 = "1000000000";
const sc_lv<13> Echo::ap_ST_fsm_state11 = "10000000000";
const sc_lv<13> Echo::ap_ST_fsm_state12 = "100000000000";
const sc_lv<13> Echo::ap_ST_fsm_state13 = "1000000000000";
const sc_lv<1> Echo::ap_const_lv1_0 = "0";
const sc_lv<1> Echo::ap_const_lv1_1 = "1";
const sc_lv<2> Echo::ap_const_lv2_0 = "00";
const sc_lv<2> Echo::ap_const_lv2_2 = "10";
const sc_lv<2> Echo::ap_const_lv2_3 = "11";
const sc_lv<2> Echo::ap_const_lv2_1 = "1";
const sc_lv<32> Echo::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> Echo::ap_const_lv32_7 = "111";
const sc_lv<32> Echo::ap_const_lv32_B = "1011";
const sc_lv<32> Echo::ap_const_lv32_C = "1100";
const int Echo::C_S_AXI_DATA_WIDTH = "100000";
const sc_lv<32> Echo::ap_const_lv32_1 = "1";
const sc_lv<32> Echo::ap_const_lv32_2 = "10";
const sc_lv<32> Echo::ap_const_lv32_6 = "110";
const sc_lv<32> Echo::ap_const_lv32_3 = "11";
const sc_lv<32> Echo::ap_const_lv32_12C0 = "1001011000000";
const sc_lv<32> Echo::ap_const_lv32_8 = "1000";
const sc_lv<32> Echo::ap_const_lv32_9 = "1001";
const sc_lv<32> Echo::ap_const_lv32_A = "1010";
const bool Echo::ap_const_boolean_1 = true;

Echo::Echo(sc_module_name name) : sc_module(name), mVcdFile(0) {
    buffer_r_U = new Echo_buffer_r("buffer_r_U");
    buffer_r_U->clk(ap_clk);
    buffer_r_U->reset(ap_rst_n_inv);
    buffer_r_U->address0(buffer_r_address0);
    buffer_r_U->ce0(buffer_r_ce0);
    buffer_r_U->we0(buffer_r_we0);
    buffer_r_U->d0(current_value_reg_248);
    buffer_r_U->q0(buffer_r_q0);
    Echo_CTRL_BUS_s_axi_U = new Echo_CTRL_BUS_s_axi<C_S_AXI_CTRL_BUS_ADDR_WIDTH,C_S_AXI_CTRL_BUS_DATA_WIDTH>("Echo_CTRL_BUS_s_axi_U");
    Echo_CTRL_BUS_s_axi_U->AWVALID(s_axi_CTRL_BUS_AWVALID);
    Echo_CTRL_BUS_s_axi_U->AWREADY(s_axi_CTRL_BUS_AWREADY);
    Echo_CTRL_BUS_s_axi_U->AWADDR(s_axi_CTRL_BUS_AWADDR);
    Echo_CTRL_BUS_s_axi_U->WVALID(s_axi_CTRL_BUS_WVALID);
    Echo_CTRL_BUS_s_axi_U->WREADY(s_axi_CTRL_BUS_WREADY);
    Echo_CTRL_BUS_s_axi_U->WDATA(s_axi_CTRL_BUS_WDATA);
    Echo_CTRL_BUS_s_axi_U->WSTRB(s_axi_CTRL_BUS_WSTRB);
    Echo_CTRL_BUS_s_axi_U->ARVALID(s_axi_CTRL_BUS_ARVALID);
    Echo_CTRL_BUS_s_axi_U->ARREADY(s_axi_CTRL_BUS_ARREADY);
    Echo_CTRL_BUS_s_axi_U->ARADDR(s_axi_CTRL_BUS_ARADDR);
    Echo_CTRL_BUS_s_axi_U->RVALID(s_axi_CTRL_BUS_RVALID);
    Echo_CTRL_BUS_s_axi_U->RREADY(s_axi_CTRL_BUS_RREADY);
    Echo_CTRL_BUS_s_axi_U->RDATA(s_axi_CTRL_BUS_RDATA);
    Echo_CTRL_BUS_s_axi_U->RRESP(s_axi_CTRL_BUS_RRESP);
    Echo_CTRL_BUS_s_axi_U->BVALID(s_axi_CTRL_BUS_BVALID);
    Echo_CTRL_BUS_s_axi_U->BREADY(s_axi_CTRL_BUS_BREADY);
    Echo_CTRL_BUS_s_axi_U->BRESP(s_axi_CTRL_BUS_BRESP);
    Echo_CTRL_BUS_s_axi_U->ACLK(ap_clk);
    Echo_CTRL_BUS_s_axi_U->ARESET(ap_rst_n_inv);
    Echo_CTRL_BUS_s_axi_U->ACLK_EN(ap_var_for_const0);
    Echo_CTRL_BUS_s_axi_U->delay(delay);
    Echo_CTRL_BUS_s_axi_U->scale(scale);
    Echo_fadd_32ns_32bkb_U1 = new Echo_fadd_32ns_32bkb<1,5,32,32,32>("Echo_fadd_32ns_32bkb_U1");
    Echo_fadd_32ns_32bkb_U1->clk(ap_clk);
    Echo_fadd_32ns_32bkb_U1->reset(ap_rst_n_inv);
    Echo_fadd_32ns_32bkb_U1->din0(value_in_V_0_data_out);
    Echo_fadd_32ns_32bkb_U1->din1(tmp_5_reg_238);
    Echo_fadd_32ns_32bkb_U1->ce(grp_fu_114_ce);
    Echo_fadd_32ns_32bkb_U1->dout(grp_fu_114_p2);
    Echo_fmul_32ns_32cud_U2 = new Echo_fmul_32ns_32cud<1,4,32,32,32>("Echo_fmul_32ns_32cud_U2");
    Echo_fmul_32ns_32cud_U2->clk(ap_clk);
    Echo_fmul_32ns_32cud_U2->reset(ap_rst_n_inv);
    Echo_fmul_32ns_32cud_U2->din0(buffer_load_reg_233);
    Echo_fmul_32ns_32cud_U2->din1(scale_read_reg_210);
    Echo_fmul_32ns_32cud_U2->ce(ap_var_for_const0);
    Echo_fmul_32ns_32cud_U2->dout(grp_fu_120_p2);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state10);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state11);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state12);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state13);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state7);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state8);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state9);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_rst_n_inv);
    sensitive << ( ap_rst_n );

    SC_METHOD(thread_buffer_r_address0);
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( tmp_4_fu_144_p1 );
    sensitive << ( tmp_6_fu_179_p1 );

    SC_METHOD(thread_buffer_r_ce0);
    sensitive << ( value_out_V_1_ack_in );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_buffer_r_we0);
    sensitive << ( value_out_V_1_ack_in );
    sensitive << ( ap_CS_fsm_state13 );

    SC_METHOD(thread_grp_fu_114_ce);
    sensitive << ( value_in_V_0_vld_out );
    sensitive << ( value_out_V_1_ack_in );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state11 );

    SC_METHOD(thread_guard_variable_for_E_load_fu_124_p1);
    sensitive << ( guard_variable_for_E );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_storemerge5_fu_196_p3);
    sensitive << ( tmp_8_fu_184_p2 );
    sensitive << ( tmp_7_fu_190_p2 );

    SC_METHOD(thread_storemerge_fu_161_p3);
    sensitive << ( tmp_9_fu_149_p2 );
    sensitive << ( tmp_s_fu_155_p2 );

    SC_METHOD(thread_tmp_2_i_fu_132_p2);
    sensitive << ( delay );

    SC_METHOD(thread_tmp_4_fu_144_p1);
    sensitive << ( readBuffer_loc_reg_105 );

    SC_METHOD(thread_tmp_6_fu_179_p1);
    sensitive << ( writeBuffer );

    SC_METHOD(thread_tmp_7_fu_190_p2);
    sensitive << ( writeBuffer );

    SC_METHOD(thread_tmp_8_fu_184_p2);
    sensitive << ( value_out_V_1_ack_in );
    sensitive << ( writeBuffer );
    sensitive << ( ap_CS_fsm_state13 );

    SC_METHOD(thread_tmp_9_fu_149_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( readBuffer_loc_reg_105 );

    SC_METHOD(thread_tmp_s_fu_155_p2);
    sensitive << ( readBuffer_loc_reg_105 );

    SC_METHOD(thread_value_in_V_0_ack_in);
    sensitive << ( value_in_V_0_state );

    SC_METHOD(thread_value_in_V_0_ack_out);
    sensitive << ( value_in_V_0_vld_out );
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_value_in_V_0_data_out);
    sensitive << ( value_in_V_0_payload_A );
    sensitive << ( value_in_V_0_payload_B );
    sensitive << ( value_in_V_0_sel );

    SC_METHOD(thread_value_in_V_0_load_A);
    sensitive << ( value_in_V_0_sel_wr );
    sensitive << ( value_in_V_0_state_cmp_full );

    SC_METHOD(thread_value_in_V_0_load_B);
    sensitive << ( value_in_V_0_sel_wr );
    sensitive << ( value_in_V_0_state_cmp_full );

    SC_METHOD(thread_value_in_V_0_sel);
    sensitive << ( value_in_V_0_sel_rd );

    SC_METHOD(thread_value_in_V_0_state_cmp_full);
    sensitive << ( value_in_V_0_state );

    SC_METHOD(thread_value_in_V_0_vld_in);
    sensitive << ( value_in_V_TVALID );

    SC_METHOD(thread_value_in_V_0_vld_out);
    sensitive << ( value_in_V_0_state );

    SC_METHOD(thread_value_in_V_TDATA_blk_n);
    sensitive << ( value_in_V_0_state );
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_value_in_V_TREADY);
    sensitive << ( value_in_V_0_state );

    SC_METHOD(thread_value_out_V_1_ack_in);
    sensitive << ( value_out_V_1_state );

    SC_METHOD(thread_value_out_V_1_ack_out);
    sensitive << ( value_out_V_TREADY );

    SC_METHOD(thread_value_out_V_1_data_out);
    sensitive << ( value_out_V_1_payload_A );
    sensitive << ( value_out_V_1_payload_B );
    sensitive << ( value_out_V_1_sel );

    SC_METHOD(thread_value_out_V_1_load_A);
    sensitive << ( value_out_V_1_sel_wr );
    sensitive << ( value_out_V_1_state_cmp_full );

    SC_METHOD(thread_value_out_V_1_load_B);
    sensitive << ( value_out_V_1_sel_wr );
    sensitive << ( value_out_V_1_state_cmp_full );

    SC_METHOD(thread_value_out_V_1_sel);
    sensitive << ( value_out_V_1_sel_rd );

    SC_METHOD(thread_value_out_V_1_state_cmp_full);
    sensitive << ( value_out_V_1_state );

    SC_METHOD(thread_value_out_V_1_vld_in);
    sensitive << ( value_out_V_1_ack_in );
    sensitive << ( ap_CS_fsm_state12 );

    SC_METHOD(thread_value_out_V_1_vld_out);
    sensitive << ( value_out_V_1_state );

    SC_METHOD(thread_value_out_V_TDATA);
    sensitive << ( value_out_V_1_data_out );

    SC_METHOD(thread_value_out_V_TDATA_blk_n);
    sensitive << ( value_out_V_1_state );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state13 );

    SC_METHOD(thread_value_out_V_TVALID);
    sensitive << ( value_out_V_1_state );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( value_in_V_0_vld_out );
    sensitive << ( value_out_V_1_ack_in );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state13 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    SC_THREAD(thread_ap_var_for_const0);

    value_in_V_0_sel_rd = SC_LOGIC_0;
    value_in_V_0_sel_wr = SC_LOGIC_0;
    value_in_V_0_state = "00";
    value_out_V_1_sel_rd = SC_LOGIC_0;
    value_out_V_1_sel_wr = SC_LOGIC_0;
    value_out_V_1_state = "00";
    guard_variable_for_E = "0";
    readBuffer = "00000000000000000000000000000000";
    writeBuffer = "00000000000000000000000000000000";
    ap_CS_fsm = "0000000000001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "Echo_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst_n, "(port)ap_rst_n");
    sc_trace(mVcdFile, value_in_V_TDATA, "(port)value_in_V_TDATA");
    sc_trace(mVcdFile, value_in_V_TVALID, "(port)value_in_V_TVALID");
    sc_trace(mVcdFile, value_in_V_TREADY, "(port)value_in_V_TREADY");
    sc_trace(mVcdFile, value_out_V_TDATA, "(port)value_out_V_TDATA");
    sc_trace(mVcdFile, value_out_V_TVALID, "(port)value_out_V_TVALID");
    sc_trace(mVcdFile, value_out_V_TREADY, "(port)value_out_V_TREADY");
    sc_trace(mVcdFile, s_axi_CTRL_BUS_AWVALID, "(port)s_axi_CTRL_BUS_AWVALID");
    sc_trace(mVcdFile, s_axi_CTRL_BUS_AWREADY, "(port)s_axi_CTRL_BUS_AWREADY");
    sc_trace(mVcdFile, s_axi_CTRL_BUS_AWADDR, "(port)s_axi_CTRL_BUS_AWADDR");
    sc_trace(mVcdFile, s_axi_CTRL_BUS_WVALID, "(port)s_axi_CTRL_BUS_WVALID");
    sc_trace(mVcdFile, s_axi_CTRL_BUS_WREADY, "(port)s_axi_CTRL_BUS_WREADY");
    sc_trace(mVcdFile, s_axi_CTRL_BUS_WDATA, "(port)s_axi_CTRL_BUS_WDATA");
    sc_trace(mVcdFile, s_axi_CTRL_BUS_WSTRB, "(port)s_axi_CTRL_BUS_WSTRB");
    sc_trace(mVcdFile, s_axi_CTRL_BUS_ARVALID, "(port)s_axi_CTRL_BUS_ARVALID");
    sc_trace(mVcdFile, s_axi_CTRL_BUS_ARREADY, "(port)s_axi_CTRL_BUS_ARREADY");
    sc_trace(mVcdFile, s_axi_CTRL_BUS_ARADDR, "(port)s_axi_CTRL_BUS_ARADDR");
    sc_trace(mVcdFile, s_axi_CTRL_BUS_RVALID, "(port)s_axi_CTRL_BUS_RVALID");
    sc_trace(mVcdFile, s_axi_CTRL_BUS_RREADY, "(port)s_axi_CTRL_BUS_RREADY");
    sc_trace(mVcdFile, s_axi_CTRL_BUS_RDATA, "(port)s_axi_CTRL_BUS_RDATA");
    sc_trace(mVcdFile, s_axi_CTRL_BUS_RRESP, "(port)s_axi_CTRL_BUS_RRESP");
    sc_trace(mVcdFile, s_axi_CTRL_BUS_BVALID, "(port)s_axi_CTRL_BUS_BVALID");
    sc_trace(mVcdFile, s_axi_CTRL_BUS_BREADY, "(port)s_axi_CTRL_BUS_BREADY");
    sc_trace(mVcdFile, s_axi_CTRL_BUS_BRESP, "(port)s_axi_CTRL_BUS_BRESP");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_rst_n_inv, "ap_rst_n_inv");
    sc_trace(mVcdFile, value_in_V_0_data_out, "value_in_V_0_data_out");
    sc_trace(mVcdFile, value_in_V_0_vld_in, "value_in_V_0_vld_in");
    sc_trace(mVcdFile, value_in_V_0_vld_out, "value_in_V_0_vld_out");
    sc_trace(mVcdFile, value_in_V_0_ack_in, "value_in_V_0_ack_in");
    sc_trace(mVcdFile, value_in_V_0_ack_out, "value_in_V_0_ack_out");
    sc_trace(mVcdFile, value_in_V_0_payload_A, "value_in_V_0_payload_A");
    sc_trace(mVcdFile, value_in_V_0_payload_B, "value_in_V_0_payload_B");
    sc_trace(mVcdFile, value_in_V_0_sel_rd, "value_in_V_0_sel_rd");
    sc_trace(mVcdFile, value_in_V_0_sel_wr, "value_in_V_0_sel_wr");
    sc_trace(mVcdFile, value_in_V_0_sel, "value_in_V_0_sel");
    sc_trace(mVcdFile, value_in_V_0_load_A, "value_in_V_0_load_A");
    sc_trace(mVcdFile, value_in_V_0_load_B, "value_in_V_0_load_B");
    sc_trace(mVcdFile, value_in_V_0_state, "value_in_V_0_state");
    sc_trace(mVcdFile, value_in_V_0_state_cmp_full, "value_in_V_0_state_cmp_full");
    sc_trace(mVcdFile, value_out_V_1_data_out, "value_out_V_1_data_out");
    sc_trace(mVcdFile, value_out_V_1_vld_in, "value_out_V_1_vld_in");
    sc_trace(mVcdFile, value_out_V_1_vld_out, "value_out_V_1_vld_out");
    sc_trace(mVcdFile, value_out_V_1_ack_in, "value_out_V_1_ack_in");
    sc_trace(mVcdFile, value_out_V_1_ack_out, "value_out_V_1_ack_out");
    sc_trace(mVcdFile, value_out_V_1_payload_A, "value_out_V_1_payload_A");
    sc_trace(mVcdFile, value_out_V_1_payload_B, "value_out_V_1_payload_B");
    sc_trace(mVcdFile, value_out_V_1_sel_rd, "value_out_V_1_sel_rd");
    sc_trace(mVcdFile, value_out_V_1_sel_wr, "value_out_V_1_sel_wr");
    sc_trace(mVcdFile, value_out_V_1_sel, "value_out_V_1_sel");
    sc_trace(mVcdFile, value_out_V_1_load_A, "value_out_V_1_load_A");
    sc_trace(mVcdFile, value_out_V_1_load_B, "value_out_V_1_load_B");
    sc_trace(mVcdFile, value_out_V_1_state, "value_out_V_1_state");
    sc_trace(mVcdFile, value_out_V_1_state_cmp_full, "value_out_V_1_state_cmp_full");
    sc_trace(mVcdFile, delay, "delay");
    sc_trace(mVcdFile, scale, "scale");
    sc_trace(mVcdFile, guard_variable_for_E, "guard_variable_for_E");
    sc_trace(mVcdFile, readBuffer, "readBuffer");
    sc_trace(mVcdFile, buffer_r_address0, "buffer_r_address0");
    sc_trace(mVcdFile, buffer_r_ce0, "buffer_r_ce0");
    sc_trace(mVcdFile, buffer_r_we0, "buffer_r_we0");
    sc_trace(mVcdFile, buffer_r_q0, "buffer_r_q0");
    sc_trace(mVcdFile, writeBuffer, "writeBuffer");
    sc_trace(mVcdFile, value_in_V_TDATA_blk_n, "value_in_V_TDATA_blk_n");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state8, "ap_CS_fsm_state8");
    sc_trace(mVcdFile, value_out_V_TDATA_blk_n, "value_out_V_TDATA_blk_n");
    sc_trace(mVcdFile, ap_CS_fsm_state12, "ap_CS_fsm_state12");
    sc_trace(mVcdFile, ap_CS_fsm_state13, "ap_CS_fsm_state13");
    sc_trace(mVcdFile, scale_read_reg_210, "scale_read_reg_210");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, tmp_2_i_fu_132_p2, "tmp_2_i_fu_132_p2");
    sc_trace(mVcdFile, guard_variable_for_E_load_fu_124_p1, "guard_variable_for_E_load_fu_124_p1");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, buffer_load_reg_233, "buffer_load_reg_233");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, grp_fu_120_p2, "grp_fu_120_p2");
    sc_trace(mVcdFile, tmp_5_reg_238, "tmp_5_reg_238");
    sc_trace(mVcdFile, ap_CS_fsm_state7, "ap_CS_fsm_state7");
    sc_trace(mVcdFile, grp_fu_114_p2, "grp_fu_114_p2");
    sc_trace(mVcdFile, current_value_reg_248, "current_value_reg_248");
    sc_trace(mVcdFile, readBuffer_loc_reg_105, "readBuffer_loc_reg_105");
    sc_trace(mVcdFile, tmp_4_fu_144_p1, "tmp_4_fu_144_p1");
    sc_trace(mVcdFile, tmp_6_fu_179_p1, "tmp_6_fu_179_p1");
    sc_trace(mVcdFile, storemerge_fu_161_p3, "storemerge_fu_161_p3");
    sc_trace(mVcdFile, storemerge5_fu_196_p3, "storemerge5_fu_196_p3");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, tmp_9_fu_149_p2, "tmp_9_fu_149_p2");
    sc_trace(mVcdFile, tmp_s_fu_155_p2, "tmp_s_fu_155_p2");
    sc_trace(mVcdFile, tmp_8_fu_184_p2, "tmp_8_fu_184_p2");
    sc_trace(mVcdFile, tmp_7_fu_190_p2, "tmp_7_fu_190_p2");
    sc_trace(mVcdFile, grp_fu_114_ce, "grp_fu_114_ce");
    sc_trace(mVcdFile, ap_CS_fsm_state9, "ap_CS_fsm_state9");
    sc_trace(mVcdFile, ap_CS_fsm_state10, "ap_CS_fsm_state10");
    sc_trace(mVcdFile, ap_CS_fsm_state11, "ap_CS_fsm_state11");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("Echo.hdltvin.dat");
    mHdltvoutHandle.open("Echo.hdltvout.dat");
}

Echo::~Echo() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete buffer_r_U;
    delete Echo_CTRL_BUS_s_axi_U;
    delete Echo_fadd_32ns_32bkb_U1;
    delete Echo_fmul_32ns_32cud_U2;
}

void Echo::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_1;
}

void Echo::thread_ap_clk_no_reset_() {
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
        if (esl_seteq<1,1,1>(ap_const_lv1_1, guard_variable_for_E_load_fu_124_p1.read())) {
            readBuffer_loc_reg_105 = readBuffer.read();
        } else if (esl_seteq<1,1,1>(ap_const_lv1_0, guard_variable_for_E_load_fu_124_p1.read())) {
            readBuffer_loc_reg_105 = tmp_2_i_fu_132_p2.read();
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        value_in_V_0_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, value_in_V_0_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, value_in_V_0_vld_out.read()))) {
            value_in_V_0_sel_rd =  (sc_logic) (~value_in_V_0_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        value_in_V_0_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, value_in_V_0_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, value_in_V_0_ack_in.read()))) {
            value_in_V_0_sel_wr =  (sc_logic) (~value_in_V_0_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        value_in_V_0_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, value_in_V_0_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, value_in_V_0_ack_out.read()) && 
              esl_seteq<1,2,2>(value_in_V_0_state.read(), ap_const_lv2_3)) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, value_in_V_0_vld_in.read()) && 
              esl_seteq<1,2,2>(value_in_V_0_state.read(), ap_const_lv2_2)))) {
            value_in_V_0_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, value_in_V_0_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, value_in_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(value_in_V_0_state.read(), ap_const_lv2_3)) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, value_in_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(value_in_V_0_state.read(), ap_const_lv2_1)))) {
            value_in_V_0_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, value_in_V_0_vld_in.read()) && 
                     esl_seteq<1,2,2>(value_in_V_0_state.read(), ap_const_lv2_2)) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, value_in_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(value_in_V_0_state.read(), ap_const_lv2_1)) || 
                    (esl_seteq<1,2,2>(value_in_V_0_state.read(), ap_const_lv2_3) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, value_in_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, value_in_V_0_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, value_in_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, value_in_V_0_ack_out.read()))))) {
            value_in_V_0_state = ap_const_lv2_3;
        } else {
            value_in_V_0_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        value_out_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, value_out_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, value_out_V_1_vld_out.read()))) {
            value_out_V_1_sel_rd =  (sc_logic) (~value_out_V_1_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        value_out_V_1_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, value_out_V_1_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, value_out_V_1_ack_in.read()))) {
            value_out_V_1_sel_wr =  (sc_logic) (~value_out_V_1_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        value_out_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, value_out_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, value_out_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, value_out_V_1_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, value_out_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, value_out_V_1_state.read())))) {
            value_out_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, value_out_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, value_out_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, value_out_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, value_out_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, value_out_V_1_state.read())))) {
            value_out_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, value_out_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, value_out_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, value_out_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, value_out_V_1_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, value_out_V_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, value_out_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, value_out_V_1_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, value_out_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, value_out_V_1_ack_out.read()))))) {
            value_out_V_1_state = ap_const_lv2_3;
        } else {
            value_out_V_1_state = ap_const_lv2_2;
        }
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        buffer_load_reg_233 = buffer_r_q0.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) && esl_seteq<1,1,1>(value_out_V_1_ack_in.read(), ap_const_logic_1))) {
        current_value_reg_248 = grp_fu_114_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, guard_variable_for_E_load_fu_124_p1.read()))) {
        guard_variable_for_E = ap_const_lv1_1;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        readBuffer = storemerge_fu_161_p3.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
        scale_read_reg_210 = scale.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        tmp_5_reg_238 = grp_fu_120_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, value_in_V_0_load_A.read())) {
        value_in_V_0_payload_A = value_in_V_TDATA.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, value_in_V_0_load_B.read())) {
        value_in_V_0_payload_B = value_in_V_TDATA.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, value_out_V_1_load_A.read())) {
        value_out_V_1_payload_A = grp_fu_114_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, value_out_V_1_load_B.read())) {
        value_out_V_1_payload_B = grp_fu_114_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()) && esl_seteq<1,1,1>(value_out_V_1_ack_in.read(), ap_const_logic_1))) {
        writeBuffer = storemerge5_fu_196_p3.read();
    }
}

void Echo::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void Echo::thread_ap_CS_fsm_state10() {
    ap_CS_fsm_state10 = ap_CS_fsm.read()[9];
}

void Echo::thread_ap_CS_fsm_state11() {
    ap_CS_fsm_state11 = ap_CS_fsm.read()[10];
}

void Echo::thread_ap_CS_fsm_state12() {
    ap_CS_fsm_state12 = ap_CS_fsm.read()[11];
}

void Echo::thread_ap_CS_fsm_state13() {
    ap_CS_fsm_state13 = ap_CS_fsm.read()[12];
}

void Echo::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void Echo::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void Echo::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void Echo::thread_ap_CS_fsm_state7() {
    ap_CS_fsm_state7 = ap_CS_fsm.read()[6];
}

void Echo::thread_ap_CS_fsm_state8() {
    ap_CS_fsm_state8 = ap_CS_fsm.read()[7];
}

void Echo::thread_ap_CS_fsm_state9() {
    ap_CS_fsm_state9 = ap_CS_fsm.read()[8];
}

void Echo::thread_ap_rst_n_inv() {
    ap_rst_n_inv =  (sc_logic) (~ap_rst_n.read());
}

void Echo::thread_buffer_r_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read())) {
        buffer_r_address0 =  (sc_lv<13>) (tmp_6_fu_179_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        buffer_r_address0 =  (sc_lv<13>) (tmp_4_fu_144_p1.read());
    } else {
        buffer_r_address0 = "XXXXXXXXXXXXX";
    }
}

void Echo::thread_buffer_r_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()) && 
          esl_seteq<1,1,1>(value_out_V_1_ack_in.read(), ap_const_logic_1)))) {
        buffer_r_ce0 = ap_const_logic_1;
    } else {
        buffer_r_ce0 = ap_const_logic_0;
    }
}

void Echo::thread_buffer_r_we0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()) && 
         esl_seteq<1,1,1>(value_out_V_1_ack_in.read(), ap_const_logic_1))) {
        buffer_r_we0 = ap_const_logic_1;
    } else {
        buffer_r_we0 = ap_const_logic_0;
    }
}

void Echo::thread_grp_fu_114_ce() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) && 
          esl_seteq<1,1,1>(value_in_V_0_vld_out.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) && 
          esl_seteq<1,1,1>(value_out_V_1_ack_in.read(), ap_const_logic_1)) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()))) {
        grp_fu_114_ce = ap_const_logic_1;
    } else {
        grp_fu_114_ce = ap_const_logic_0;
    }
}

void Echo::thread_guard_variable_for_E_load_fu_124_p1() {
    guard_variable_for_E_load_fu_124_p1 = guard_variable_for_E.read();
}

void Echo::thread_storemerge5_fu_196_p3() {
    storemerge5_fu_196_p3 = (!tmp_8_fu_184_p2.read()[0].is_01())? sc_lv<32>(): ((tmp_8_fu_184_p2.read()[0].to_bool())? tmp_7_fu_190_p2.read(): ap_const_lv32_0);
}

void Echo::thread_storemerge_fu_161_p3() {
    storemerge_fu_161_p3 = (!tmp_9_fu_149_p2.read()[0].is_01())? sc_lv<32>(): ((tmp_9_fu_149_p2.read()[0].to_bool())? tmp_s_fu_155_p2.read(): ap_const_lv32_0);
}

void Echo::thread_tmp_2_i_fu_132_p2() {
    tmp_2_i_fu_132_p2 = (!ap_const_lv32_12C0.is_01() || !delay.read().is_01())? sc_lv<32>(): (sc_biguint<32>(ap_const_lv32_12C0) - sc_biguint<32>(delay.read()));
}

void Echo::thread_tmp_4_fu_144_p1() {
    tmp_4_fu_144_p1 = esl_sext<64,32>(readBuffer_loc_reg_105.read());
}

void Echo::thread_tmp_6_fu_179_p1() {
    tmp_6_fu_179_p1 = esl_sext<64,32>(writeBuffer.read());
}

void Echo::thread_tmp_7_fu_190_p2() {
    tmp_7_fu_190_p2 = (!writeBuffer.read().is_01() || !ap_const_lv32_1.is_01())? sc_lv<32>(): (sc_biguint<32>(writeBuffer.read()) + sc_biguint<32>(ap_const_lv32_1));
}

void Echo::thread_tmp_8_fu_184_p2() {
    tmp_8_fu_184_p2 = (!writeBuffer.read().is_01() || !ap_const_lv32_12C0.is_01())? sc_lv<1>(): (sc_bigint<32>(writeBuffer.read()) < sc_bigint<32>(ap_const_lv32_12C0));
}

void Echo::thread_tmp_9_fu_149_p2() {
    tmp_9_fu_149_p2 = (!readBuffer_loc_reg_105.read().is_01() || !ap_const_lv32_12C0.is_01())? sc_lv<1>(): (sc_bigint<32>(readBuffer_loc_reg_105.read()) < sc_bigint<32>(ap_const_lv32_12C0));
}

void Echo::thread_tmp_s_fu_155_p2() {
    tmp_s_fu_155_p2 = (!readBuffer_loc_reg_105.read().is_01() || !ap_const_lv32_1.is_01())? sc_lv<32>(): (sc_biguint<32>(readBuffer_loc_reg_105.read()) + sc_biguint<32>(ap_const_lv32_1));
}

void Echo::thread_value_in_V_0_ack_in() {
    value_in_V_0_ack_in = value_in_V_0_state.read()[1];
}

void Echo::thread_value_in_V_0_ack_out() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) && 
         esl_seteq<1,1,1>(value_in_V_0_vld_out.read(), ap_const_logic_1))) {
        value_in_V_0_ack_out = ap_const_logic_1;
    } else {
        value_in_V_0_ack_out = ap_const_logic_0;
    }
}

void Echo::thread_value_in_V_0_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, value_in_V_0_sel.read())) {
        value_in_V_0_data_out = value_in_V_0_payload_B.read();
    } else {
        value_in_V_0_data_out = value_in_V_0_payload_A.read();
    }
}

void Echo::thread_value_in_V_0_load_A() {
    value_in_V_0_load_A = (value_in_V_0_state_cmp_full.read() & ~value_in_V_0_sel_wr.read());
}

void Echo::thread_value_in_V_0_load_B() {
    value_in_V_0_load_B = (value_in_V_0_sel_wr.read() & value_in_V_0_state_cmp_full.read());
}

void Echo::thread_value_in_V_0_sel() {
    value_in_V_0_sel = value_in_V_0_sel_rd.read();
}

void Echo::thread_value_in_V_0_state_cmp_full() {
    value_in_V_0_state_cmp_full =  (sc_logic) ((!value_in_V_0_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(value_in_V_0_state.read() != ap_const_lv2_1))[0];
}

void Echo::thread_value_in_V_0_vld_in() {
    value_in_V_0_vld_in = value_in_V_TVALID.read();
}

void Echo::thread_value_in_V_0_vld_out() {
    value_in_V_0_vld_out = value_in_V_0_state.read()[0];
}

void Echo::thread_value_in_V_TDATA_blk_n() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        value_in_V_TDATA_blk_n = value_in_V_0_state.read()[0];
    } else {
        value_in_V_TDATA_blk_n = ap_const_logic_1;
    }
}

void Echo::thread_value_in_V_TREADY() {
    value_in_V_TREADY = value_in_V_0_state.read()[1];
}

void Echo::thread_value_out_V_1_ack_in() {
    value_out_V_1_ack_in = value_out_V_1_state.read()[1];
}

void Echo::thread_value_out_V_1_ack_out() {
    value_out_V_1_ack_out = value_out_V_TREADY.read();
}

void Echo::thread_value_out_V_1_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, value_out_V_1_sel.read())) {
        value_out_V_1_data_out = value_out_V_1_payload_B.read();
    } else {
        value_out_V_1_data_out = value_out_V_1_payload_A.read();
    }
}

void Echo::thread_value_out_V_1_load_A() {
    value_out_V_1_load_A = (value_out_V_1_state_cmp_full.read() & ~value_out_V_1_sel_wr.read());
}

void Echo::thread_value_out_V_1_load_B() {
    value_out_V_1_load_B = (value_out_V_1_sel_wr.read() & value_out_V_1_state_cmp_full.read());
}

void Echo::thread_value_out_V_1_sel() {
    value_out_V_1_sel = value_out_V_1_sel_rd.read();
}

void Echo::thread_value_out_V_1_state_cmp_full() {
    value_out_V_1_state_cmp_full =  (sc_logic) ((!value_out_V_1_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(value_out_V_1_state.read() != ap_const_lv2_1))[0];
}

void Echo::thread_value_out_V_1_vld_in() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) && 
         esl_seteq<1,1,1>(value_out_V_1_ack_in.read(), ap_const_logic_1))) {
        value_out_V_1_vld_in = ap_const_logic_1;
    } else {
        value_out_V_1_vld_in = ap_const_logic_0;
    }
}

void Echo::thread_value_out_V_1_vld_out() {
    value_out_V_1_vld_out = value_out_V_1_state.read()[0];
}

void Echo::thread_value_out_V_TDATA() {
    value_out_V_TDATA = value_out_V_1_data_out.read();
}

void Echo::thread_value_out_V_TDATA_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()))) {
        value_out_V_TDATA_blk_n = value_out_V_1_state.read()[1];
    } else {
        value_out_V_TDATA_blk_n = ap_const_logic_1;
    }
}

void Echo::thread_value_out_V_TVALID() {
    value_out_V_TVALID = value_out_V_1_state.read()[0];
}

void Echo::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            ap_NS_fsm = ap_ST_fsm_state2;
            break;
        case 2 : 
            ap_NS_fsm = ap_ST_fsm_state3;
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state4;
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state5;
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state6;
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_fsm_state7;
            break;
        case 64 : 
            ap_NS_fsm = ap_ST_fsm_state8;
            break;
        case 128 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) && esl_seteq<1,1,1>(value_in_V_0_vld_out.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state9;
            } else {
                ap_NS_fsm = ap_ST_fsm_state8;
            }
            break;
        case 256 : 
            ap_NS_fsm = ap_ST_fsm_state10;
            break;
        case 512 : 
            ap_NS_fsm = ap_ST_fsm_state11;
            break;
        case 1024 : 
            ap_NS_fsm = ap_ST_fsm_state12;
            break;
        case 2048 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) && esl_seteq<1,1,1>(value_out_V_1_ack_in.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state13;
            } else {
                ap_NS_fsm = ap_ST_fsm_state12;
            }
            break;
        case 4096 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()) && esl_seteq<1,1,1>(value_out_V_1_ack_in.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state13;
            }
            break;
        default : 
            ap_NS_fsm = "XXXXXXXXXXXXX";
            break;
    }
}

void Echo::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst_n\" :  \"" << ap_rst_n.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"value_in_V_TDATA\" :  \"" << value_in_V_TDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"value_in_V_TVALID\" :  \"" << value_in_V_TVALID.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"value_in_V_TREADY\" :  \"" << value_in_V_TREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"value_out_V_TDATA\" :  \"" << value_out_V_TDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"value_out_V_TVALID\" :  \"" << value_out_V_TVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"value_out_V_TREADY\" :  \"" << value_out_V_TREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CTRL_BUS_AWVALID\" :  \"" << s_axi_CTRL_BUS_AWVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CTRL_BUS_AWREADY\" :  \"" << s_axi_CTRL_BUS_AWREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CTRL_BUS_AWADDR\" :  \"" << s_axi_CTRL_BUS_AWADDR.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CTRL_BUS_WVALID\" :  \"" << s_axi_CTRL_BUS_WVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CTRL_BUS_WREADY\" :  \"" << s_axi_CTRL_BUS_WREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CTRL_BUS_WDATA\" :  \"" << s_axi_CTRL_BUS_WDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CTRL_BUS_WSTRB\" :  \"" << s_axi_CTRL_BUS_WSTRB.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CTRL_BUS_ARVALID\" :  \"" << s_axi_CTRL_BUS_ARVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CTRL_BUS_ARREADY\" :  \"" << s_axi_CTRL_BUS_ARREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CTRL_BUS_ARADDR\" :  \"" << s_axi_CTRL_BUS_ARADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CTRL_BUS_RVALID\" :  \"" << s_axi_CTRL_BUS_RVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CTRL_BUS_RREADY\" :  \"" << s_axi_CTRL_BUS_RREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CTRL_BUS_RDATA\" :  \"" << s_axi_CTRL_BUS_RDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CTRL_BUS_RRESP\" :  \"" << s_axi_CTRL_BUS_RRESP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CTRL_BUS_BVALID\" :  \"" << s_axi_CTRL_BUS_BVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CTRL_BUS_BREADY\" :  \"" << s_axi_CTRL_BUS_BREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CTRL_BUS_BRESP\" :  \"" << s_axi_CTRL_BUS_BRESP.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

