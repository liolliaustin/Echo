// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _Echo_HH_
#define _Echo_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "Echo_fadd_32ns_32bkb.h"
#include "Echo_fmul_32ns_32cud.h"
#include "Echo_buffer_r.h"
#include "Echo_CTRL_BUS_s_axi.h"

namespace ap_rtl {

template<unsigned int C_S_AXI_CTRL_BUS_ADDR_WIDTH = 5,
         unsigned int C_S_AXI_CTRL_BUS_DATA_WIDTH = 32>
struct Echo : public sc_module {
    // Port declarations 25
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst_n;
    sc_in< sc_lv<32> > value_in_V_TDATA;
    sc_in< sc_logic > value_in_V_TVALID;
    sc_out< sc_logic > value_in_V_TREADY;
    sc_out< sc_lv<32> > value_out_V_TDATA;
    sc_out< sc_logic > value_out_V_TVALID;
    sc_in< sc_logic > value_out_V_TREADY;
    sc_in< sc_logic > s_axi_CTRL_BUS_AWVALID;
    sc_out< sc_logic > s_axi_CTRL_BUS_AWREADY;
    sc_in< sc_uint<C_S_AXI_CTRL_BUS_ADDR_WIDTH> > s_axi_CTRL_BUS_AWADDR;
    sc_in< sc_logic > s_axi_CTRL_BUS_WVALID;
    sc_out< sc_logic > s_axi_CTRL_BUS_WREADY;
    sc_in< sc_uint<C_S_AXI_CTRL_BUS_DATA_WIDTH> > s_axi_CTRL_BUS_WDATA;
    sc_in< sc_uint<C_S_AXI_CTRL_BUS_DATA_WIDTH/8> > s_axi_CTRL_BUS_WSTRB;
    sc_in< sc_logic > s_axi_CTRL_BUS_ARVALID;
    sc_out< sc_logic > s_axi_CTRL_BUS_ARREADY;
    sc_in< sc_uint<C_S_AXI_CTRL_BUS_ADDR_WIDTH> > s_axi_CTRL_BUS_ARADDR;
    sc_out< sc_logic > s_axi_CTRL_BUS_RVALID;
    sc_in< sc_logic > s_axi_CTRL_BUS_RREADY;
    sc_out< sc_uint<C_S_AXI_CTRL_BUS_DATA_WIDTH> > s_axi_CTRL_BUS_RDATA;
    sc_out< sc_lv<2> > s_axi_CTRL_BUS_RRESP;
    sc_out< sc_logic > s_axi_CTRL_BUS_BVALID;
    sc_in< sc_logic > s_axi_CTRL_BUS_BREADY;
    sc_out< sc_lv<2> > s_axi_CTRL_BUS_BRESP;
    sc_signal< sc_logic > ap_var_for_const0;


    // Module declarations
    Echo(sc_module_name name);
    SC_HAS_PROCESS(Echo);

    ~Echo();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    Echo_buffer_r* buffer_r_U;
    Echo_CTRL_BUS_s_axi<C_S_AXI_CTRL_BUS_ADDR_WIDTH,C_S_AXI_CTRL_BUS_DATA_WIDTH>* Echo_CTRL_BUS_s_axi_U;
    Echo_fadd_32ns_32bkb<1,5,32,32,32>* Echo_fadd_32ns_32bkb_U1;
    Echo_fmul_32ns_32cud<1,4,32,32,32>* Echo_fmul_32ns_32cud_U2;
    sc_signal< sc_logic > ap_rst_n_inv;
    sc_signal< sc_lv<32> > value_in_V_0_data_out;
    sc_signal< sc_logic > value_in_V_0_vld_in;
    sc_signal< sc_logic > value_in_V_0_vld_out;
    sc_signal< sc_logic > value_in_V_0_ack_in;
    sc_signal< sc_logic > value_in_V_0_ack_out;
    sc_signal< sc_lv<32> > value_in_V_0_payload_A;
    sc_signal< sc_lv<32> > value_in_V_0_payload_B;
    sc_signal< sc_logic > value_in_V_0_sel_rd;
    sc_signal< sc_logic > value_in_V_0_sel_wr;
    sc_signal< sc_logic > value_in_V_0_sel;
    sc_signal< sc_logic > value_in_V_0_load_A;
    sc_signal< sc_logic > value_in_V_0_load_B;
    sc_signal< sc_lv<2> > value_in_V_0_state;
    sc_signal< sc_logic > value_in_V_0_state_cmp_full;
    sc_signal< sc_lv<32> > value_out_V_1_data_out;
    sc_signal< sc_logic > value_out_V_1_vld_in;
    sc_signal< sc_logic > value_out_V_1_vld_out;
    sc_signal< sc_logic > value_out_V_1_ack_in;
    sc_signal< sc_logic > value_out_V_1_ack_out;
    sc_signal< sc_lv<32> > value_out_V_1_payload_A;
    sc_signal< sc_lv<32> > value_out_V_1_payload_B;
    sc_signal< sc_logic > value_out_V_1_sel_rd;
    sc_signal< sc_logic > value_out_V_1_sel_wr;
    sc_signal< sc_logic > value_out_V_1_sel;
    sc_signal< sc_logic > value_out_V_1_load_A;
    sc_signal< sc_logic > value_out_V_1_load_B;
    sc_signal< sc_lv<2> > value_out_V_1_state;
    sc_signal< sc_logic > value_out_V_1_state_cmp_full;
    sc_signal< sc_lv<32> > delay;
    sc_signal< sc_lv<32> > scale;
    sc_signal< sc_lv<1> > guard_variable_for_E;
    sc_signal< sc_lv<32> > readBuffer;
    sc_signal< sc_lv<13> > buffer_r_address0;
    sc_signal< sc_logic > buffer_r_ce0;
    sc_signal< sc_logic > buffer_r_we0;
    sc_signal< sc_lv<32> > buffer_r_q0;
    sc_signal< sc_lv<32> > writeBuffer;
    sc_signal< sc_logic > value_in_V_TDATA_blk_n;
    sc_signal< sc_lv<13> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state8;
    sc_signal< sc_logic > value_out_V_TDATA_blk_n;
    sc_signal< sc_logic > ap_CS_fsm_state12;
    sc_signal< sc_logic > ap_CS_fsm_state13;
    sc_signal< sc_lv<32> > scale_read_reg_210;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<32> > tmp_2_i_fu_132_p2;
    sc_signal< sc_lv<1> > guard_variable_for_E_load_fu_124_p1;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<32> > buffer_load_reg_233;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_lv<32> > grp_fu_120_p2;
    sc_signal< sc_lv<32> > tmp_5_reg_238;
    sc_signal< sc_logic > ap_CS_fsm_state7;
    sc_signal< sc_lv<32> > grp_fu_114_p2;
    sc_signal< sc_lv<32> > current_value_reg_248;
    sc_signal< sc_lv<32> > readBuffer_loc_reg_105;
    sc_signal< sc_lv<64> > tmp_4_fu_144_p1;
    sc_signal< sc_lv<64> > tmp_6_fu_179_p1;
    sc_signal< sc_lv<32> > storemerge_fu_161_p3;
    sc_signal< sc_lv<32> > storemerge5_fu_196_p3;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_lv<1> > tmp_9_fu_149_p2;
    sc_signal< sc_lv<32> > tmp_s_fu_155_p2;
    sc_signal< sc_lv<1> > tmp_8_fu_184_p2;
    sc_signal< sc_lv<32> > tmp_7_fu_190_p2;
    sc_signal< sc_logic > grp_fu_114_ce;
    sc_signal< sc_logic > ap_CS_fsm_state9;
    sc_signal< sc_logic > ap_CS_fsm_state10;
    sc_signal< sc_logic > ap_CS_fsm_state11;
    sc_signal< sc_lv<13> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<13> ap_ST_fsm_state1;
    static const sc_lv<13> ap_ST_fsm_state2;
    static const sc_lv<13> ap_ST_fsm_state3;
    static const sc_lv<13> ap_ST_fsm_state4;
    static const sc_lv<13> ap_ST_fsm_state5;
    static const sc_lv<13> ap_ST_fsm_state6;
    static const sc_lv<13> ap_ST_fsm_state7;
    static const sc_lv<13> ap_ST_fsm_state8;
    static const sc_lv<13> ap_ST_fsm_state9;
    static const sc_lv<13> ap_ST_fsm_state10;
    static const sc_lv<13> ap_ST_fsm_state11;
    static const sc_lv<13> ap_ST_fsm_state12;
    static const sc_lv<13> ap_ST_fsm_state13;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<2> ap_const_lv2_0;
    static const sc_lv<2> ap_const_lv2_2;
    static const sc_lv<2> ap_const_lv2_3;
    static const sc_lv<2> ap_const_lv2_1;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_7;
    static const sc_lv<32> ap_const_lv32_B;
    static const sc_lv<32> ap_const_lv32_C;
    static const int C_S_AXI_DATA_WIDTH;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<32> ap_const_lv32_6;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<32> ap_const_lv32_12C0;
    static const sc_lv<32> ap_const_lv32_8;
    static const sc_lv<32> ap_const_lv32_9;
    static const sc_lv<32> ap_const_lv32_A;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_var_for_const0();
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state10();
    void thread_ap_CS_fsm_state11();
    void thread_ap_CS_fsm_state12();
    void thread_ap_CS_fsm_state13();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state4();
    void thread_ap_CS_fsm_state7();
    void thread_ap_CS_fsm_state8();
    void thread_ap_CS_fsm_state9();
    void thread_ap_rst_n_inv();
    void thread_buffer_r_address0();
    void thread_buffer_r_ce0();
    void thread_buffer_r_we0();
    void thread_grp_fu_114_ce();
    void thread_guard_variable_for_E_load_fu_124_p1();
    void thread_storemerge5_fu_196_p3();
    void thread_storemerge_fu_161_p3();
    void thread_tmp_2_i_fu_132_p2();
    void thread_tmp_4_fu_144_p1();
    void thread_tmp_6_fu_179_p1();
    void thread_tmp_7_fu_190_p2();
    void thread_tmp_8_fu_184_p2();
    void thread_tmp_9_fu_149_p2();
    void thread_tmp_s_fu_155_p2();
    void thread_value_in_V_0_ack_in();
    void thread_value_in_V_0_ack_out();
    void thread_value_in_V_0_data_out();
    void thread_value_in_V_0_load_A();
    void thread_value_in_V_0_load_B();
    void thread_value_in_V_0_sel();
    void thread_value_in_V_0_state_cmp_full();
    void thread_value_in_V_0_vld_in();
    void thread_value_in_V_0_vld_out();
    void thread_value_in_V_TDATA_blk_n();
    void thread_value_in_V_TREADY();
    void thread_value_out_V_1_ack_in();
    void thread_value_out_V_1_ack_out();
    void thread_value_out_V_1_data_out();
    void thread_value_out_V_1_load_A();
    void thread_value_out_V_1_load_B();
    void thread_value_out_V_1_sel();
    void thread_value_out_V_1_state_cmp_full();
    void thread_value_out_V_1_vld_in();
    void thread_value_out_V_1_vld_out();
    void thread_value_out_V_TDATA();
    void thread_value_out_V_TDATA_blk_n();
    void thread_value_out_V_TVALID();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
